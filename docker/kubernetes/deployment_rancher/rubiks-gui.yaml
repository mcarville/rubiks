apiVersion: apps/v1beta2
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
    field.cattle.io/creatorId: user-flh9j
    field.cattle.io/publicEndpoints: '[{"nodeName":"c-dk4n2:m-9e844721a0bc","addresses":["192.168.1.21"],"port":8080,"protocol":"TCP","podName":"default:rubiks-gui-c77cf97c5-tskfb","allNodes":false}]'
  creationTimestamp: null
  generation: 1
  labels:
    workload.user.cattle.io/workloadselector: deployment-default-rubiks-gui
  name: rubiks-gui
  selfLink: /apis/apps/v1beta2/namespaces/default/deployments/rubiks-gui
spec:
  paused: true
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      workload.user.cattle.io/workloadselector: deployment-default-rubiks-gui
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      annotations:
        field.cattle.io/ports: '[[{"containerPort":8080,"dnsName":"rubiks-gui-hostport","hostPort":8080,"kind":"HostPort","name":"8080tcp80800","protocol":"TCP","sourcePort":8080}]]'
        field.cattle.io/publicEndpoints: '[{"addresses":["192.168.1.21"],"nodeId":"c-dk4n2:m-9e844721a0bc","port":8080,"protocol":"TCP"}]'
      creationTimestamp: null
      labels:
        workload.user.cattle.io/workloadselector: deployment-default-rubiks-gui
    spec:
      containers:
      - env:
        - name: KAFKA_BROKER_HOST
          value: kafka-for-rubiks
        image: mcarville/sandbox:rubiks.master.c721ff2
        imagePullPolicy: IfNotPresent
        name: rubiks-gui
        ports:
        - containerPort: 8080
          hostPort: 8080
          name: 8080tcp80800
          protocol: TCP
        resources: {}
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          readOnlyRootFilesystem: false
          runAsNonRoot: false
        stdin: true
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        tty: true
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
status: {}
